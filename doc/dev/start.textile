h3. Cabal
* Dependency hinzufügen: in dit-calendar.cabal unter dem "build-depends:"-Tag
* alles installieren und bauen: cabal install -j

h4. Sandbox
* beim erstem Mal sandbox aufsetzen: cabal sandbox init
** alles Dependency und Compelierte Dateinen werden nicht mehr global sondern local(im Projektverzeichnis) installiert
* Play around with the code in GHCi
** cabal repl
** stack ghci

h4. Programm bauen und ausführen
* bauen: cabal build 
* starten: .cabal-sandbox/bin/dit-calendar
* einzelne Datein ausführen: ?
* bei kaputtem cabal: cabal clean

h5. Stack
* bauen: stack build
* starten: stack exec dit-calendar
* bei kaputtem stack: stack clean
* Manche IDE's benötigen das Packet "intero" dies muss beim ersten mal manuell installiert werden stack install intero-0.1.24 --resolver=lts-10.10

h4. Test ausführen
* builds tests and runs them: cabal install --enable-tests
** oder cabal configure --enable-tests
* alle Tests ausführen: cabal test
* einzelne Tests ausführen: ?

h4. Test Coverage
* 

h3. Code Quality
* http://taylor.fausak.me/2014/03/04/haskeleton-a-haskell-project-skeleton/


h2. URL's

h3. User

h4. Login
* curl -H "Content-Type: application/json" -X POST -d '{"user":"alex2","password":"12345"}' https://localhost:8443/authenticate/authentication-methods/password/token --insecure

h4. User erstellen
* curl -H "Content-Type: application/json" -X POST -d '{"naPassword":"12345","naPasswordConfirm":"12345", "naUser":{"email": "a.befort@googlemail.com", "username":"alex2", "userId":0}}' https://localhost:8443/authenticate/authentication-methods/password/account --insecure

h4 Get Logged User
* curl -H "Authorization: Bearer xxx" -X GET https://localhost:8443/users/me --insecure

h4. update User
* curl -H "Content-Type: application/json" -H "Authorization: Bearer xxx" -X PUT -d '{"loginName":"test", "userId":1}' https://localhost:8443/user/me --insecure

h4. send request with token
* curl -H "Authorization: Bearer xxx" -X GET https://localhost:8443/ --insecure

h4. show all users
* curl -X GET https://localhost:8443/users --insecure

h4. show specific user
* curl -X GET https://localhost:8443/users/1 --insecure

h3. Calendar

h4. calendar anzeigen
* curl -H "Content-Type: application/json" -H "Authorization: Bearer xxx" -X GET https://localhost:8443/calendarentries/1 --insecure

h4. calendar erstellen
* curl -H "Content-Type: application/json" -H "Authorization: Bearer XXX" -X POST -d '{"description":"testHeute","userId":1,"date":"2011-11-19T18:28:52.607875Z"}' https://localhost:8443/calendarentries --insecure

h4. calendar update
* curl -H "Content-Type: application/json" -H "Authorization: Bearer XX" -X PUT -d '{"description":"testHeute","userId":1,"date":"2011-11-19T18:28:52.607875Z"}' https://localhost:8443/calendarentries/1 --insecure
** url ist falsch da das routing noch eine id erwartet

h3. Task

h4. task anzeigen
* curl -H "Content-Type: application/json" -H "Authorization: Bearer xxx" -X GET https://localhost:8443/calendarentries/1/tasks/1 --insecure

h4. task erstellen
* curl -H "Content-Type: application/json" -H "Authorization: Bearer xxx" -X POST -d '{"description":"testHeute", "belongingUsers":[1]}' https://localhost:8443/calendarentries/1/tasks --insecure

h4. update task
* curl -H "Content-Type: application/json" -H "Authorization: Bearer xxx" -X PUT -d '{"description":"testHeute2", "belongingUsers":[1]}' https://localhost:8443/calendarentries/1/tasks/1 --insecure